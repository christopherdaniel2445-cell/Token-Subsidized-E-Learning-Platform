(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-LEARNER u101)
(define-constant ERR-INVALID-COURSE u102)
(define-constant ERR-INSUFFICIENT-FUNDS u103)
(define-constant ERR-NOT-ELIGIBLE u104)
(define-constant ERR-SUBSIDY-ALREADY-APPLIED u105)
(define-constant ERR-INVALID-AMOUNT u106)
(define-constant ERR-INVALID-ORACLE u107)
(define-constant ERR-ORACLE-NOT-SET u108)
(define-constant ERR-INVALID-TIMESTAMP u109)
(define-constant ERR-DISTRIBUTION-FAILED u110)
(define-constant ERR-INVALID-CAP u111)
(define-constant ERR-INVALID-RATE u112)
(define-constant ERR-INVALID-STATUS u113)
(define-constant ERR-MAX-SUBSIDIES-EXCEEDED u114)
(define-constant ERR-INVALID-LOCATION u115)
(define-constant ERR-INVALID-POOL u116)
(define-constant ERR-TRANSFER-FAILED u117)
(define-constant ERR-INVALID-PARAM u118)
(define-constant ERR-ALREADY-DISTRIBUTED u119)
(define-constant ERR-INVALID-THRESHOLD u120)
(define-constant ERR-INVALID-MIN-SUBSIDY u121)
(define-constant ERR-INVALID-MAX-SUBSIDY u122)
(define-constant ERR-POOL-NOT-SET u123)
(define-constant ERR-TOKEN-NOT-SET u124)
(define-constant ERR-REGISTRY-NOT-SET u125)
(define-constant ERR-MANAGEMENT-NOT-SET u126)
(define-constant ERR-INVALID-DURATION u127)
(define-constant ERR-INVALID-FEE u128)
(define-constant ERR-FEE-TRANSFER-FAILED u129)
(define-constant ERR-INVALID-RECIPIENT u130)

(define-data-var subsidy-pool-balance uint u0)
(define-data-var max-subsidies-per-learner uint u5)
(define-data-var subsidy-cap-per-course uint u1000)
(define-data-var min-subsidy-amount uint u10)
(define-data-var max-subsidy-amount uint u5000)
(define-data-var admin principal tx-sender)
(define-data-var oracle-contract (optional principal) none)
(define-data-var token-contract (optional principal) none)
(define-data-var registry-contract (optional principal) none)
(define-data-var management-contract (optional principal) none)
(define-data-var distribution-fee uint u50)
(define-data-var last-distribution-time uint u0)
(define-data-var distribution-interval uint u144)
(define-data-var active-status bool true)
(define-data-var total-subsidies-distributed uint u0)
(define-data-var eligibility-threshold uint u80)

(define-map applied-subsidies { learner: principal, course-id: uint } { amount: uint, timestamp: uint, status: bool })
(define-map pending-distributions uint { learner: principal, course-id: uint, amount: uint })
(define-map learner-subsidy-count principal uint)
(define-map course-subsidy-limits uint uint)
(define-map location-eligibility (string-utf8 100) bool)

(define-read-only (get-subsidy-pool-balance)
  (var-get subsidy-pool-balance)
)

(define-read-only (get-applied-subsidy (learner principal) (course-id uint))
  (map-get? applied-subsidies { learner: learner, course-id: course-id })
)

(define-read-only (get-learner-subsidy-count (learner principal))
  (default-to u0 (map-get? learner-subsidy-count learner))
)

(define-read-only (get-pending-distribution (dist-id uint))
  (map-get? pending-distributions dist-id)
)

(define-read-only (check-eligibility (learner principal) (course-id uint))
  (let (
    (user-profile (unwrap! (contract-call? (unwrap! (var-get registry-contract) (err ERR-REGISTRY-NOT-SET)) get-user-profile learner) (err ERR-INVALID-LEARNER)))
    (course-cost (unwrap! (contract-call? (unwrap! (var-get management-contract) (err ERR-MANAGEMENT-NOT-SET)) get-course-cost course-id) (err ERR-INVALID-COURSE)))
    (remote-area (get remote-area user-profile))
    (location (get location user-profile))
    (eligible-location (default-to false (map-get? location-eligibility location)))
    (score (get eligibility-score user-profile))
  )
    (if (and remote-area eligible-location (>= score (var-get eligibility-threshold)))
      (ok { eligible: true, subsidy-amount: (min course-cost (var-get subsidy-cap-per-course)) })
      (err ERR-NOT-ELIGIBLE)
    )
  )
)

(define-private (validate-learner (learner principal))
  (if (is-eq learner tx-sender) (ok true) (err ERR-INVALID-LEARNER))
)

(define-private (validate-course (course-id uint))
  (if (> course-id u0) (ok true) (err ERR-INVALID-COURSE))
)

(define-private (validate-amount (amount uint))
  (if (and (>= amount (var-get min-subsidy-amount)) (<= amount (var-get max-subsidy-amount))) (ok true) (err ERR-INVALID-AMOUNT))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height) (ok true) (err ERR-INVALID-TIMESTAMP))
)

(define-private (validate-oracle (oracle principal))
  (if (not (is-eq oracle 'SP000000000000000000002Q6VF78)) (ok true) (err ERR-INVALID-ORACLE))
)

(define-private (validate-status (status bool))
  (if status (ok true) (err ERR-INVALID-STATUS))
)

(define-private (validate-cap (cap uint))
  (if (> cap u0) (ok true) (err ERR-INVALID-CAP))
)

(define-private (validate-rate (rate uint))
  (if (<= rate u100) (ok true) (err ERR-INVALID-RATE))
)

(define-private (validate-threshold (threshold uint))
  (if (and (> threshold u0) (<= threshold u100)) (ok true) (err ERR-INVALID-THRESHOLD))
)

(define-private (validate-duration (duration uint))
  (if (> duration u0) (ok true) (err ERR-INVALID-DURATION))
)

(define-private (validate-fee (fee uint))
  (if (>= fee u0) (ok true) (err ERR-INVALID-FEE))
)

(define-private (validate-location (loc (string-utf8 100)))
  (if (and (> (len loc) u0) (<= (len loc) u100)) (ok true) (err ERR-INVALID-LOCATION))
)

(define-public (set-oracle-contract (oracle principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-oracle oracle))
    (var-set oracle-contract (some oracle))
    (ok true)
  )
)

(define-public (set-token-contract (token principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set token-contract (some token))
    (ok true)
  )
)

(define-public (set-registry-contract (registry principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set registry-contract (some registry))
    (ok true)
  )
)

(define-public (set-management-contract (management principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set management-contract (some management))
    (ok true)
  )
)

(define-public (set-subsidy-cap-per-course (cap uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-cap cap))
    (var-set subsidy-cap-per-course cap)
    (ok true)
  )
)

(define-public (set-min-subsidy-amount (min uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-amount min))
    (var-set min-subsidy-amount min)
    (ok true)
  )
)

(define-public (set-max-subsidy-amount (max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-amount max))
    (var-set max-subsidy-amount max)
    (ok true)
  )
)

(define-public (set-max-subsidies-per-learner (max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-cap max))
    (var-set max-subsidies-per-learner max)
    (ok true)
  )
)

(define-public (set-distribution-fee (fee uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-fee fee))
    (var-set distribution-fee fee)
    (ok true)
  )
)

(define-public (set-distribution-interval (interval uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-duration interval))
    (var-set distribution-interval interval)
    (ok true)
  )
)

(define-public (set-eligibility-threshold (threshold uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-threshold threshold))
    (var-set eligibility-threshold threshold)
    (ok true)
  )
)

(define-public (add-eligible-location (loc (string-utf8 100)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-location loc))
    (map-set location-eligibility loc true)
    (ok true)
  )
)

(define-public (remove-eligible-location (loc (string-utf8 100)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (map-delete location-eligibility loc)
    (ok true)
  )
)

(define-public (deposit-to-pool (amount uint))
  (let (
    (token (unwrap! (var-get token-contract) (err ERR-TOKEN-NOT-SET)))
  )
    (asserts! (>= amount (var-get min-subsidy-amount)) (err ERR-INVALID-AMOUNT))
    (try! (contract-call? token transfer amount tx-sender (as-contract tx-sender) none))
    (var-set subsidy-pool-balance (+ (var-get subsidy-pool-balance) amount))
    (print { event: "deposit-to-pool", amount: amount, depositor: tx-sender })
    (ok true)
  )
)

(define-public (apply-subsidy (course-id uint))
  (let (
    (learner tx-sender)
    (eligibility (unwrap! (check-eligibility learner course-id) (err ERR-NOT-ELIGIBLE)))
    (subsidy-amount (get subsidy-amount eligibility))
    (current-count (get-learner-subsidy-count learner))
    (pool-balance (var-get subsidy-pool-balance))
  )
    (asserts! (var-get active-status) (err ERR-INVALID-STATUS))
    (asserts! (< current-count (var-get max-subsidies-per-learner)) (err ERR-MAX-SUBSIDIES-EXCEEDED))
    (asserts! (is-none (get-applied-subsidy learner course-id)) (err ERR-SUBSIDY-ALREADY-APPLIED))
    (asserts! (>= pool-balance subsidy-amount) (err ERR-INSUFFICIENT-FUNDS))
    (map-set applied-subsidies { learner: learner, course-id: course-id } { amount: subsidy-amount, timestamp: block-height, status: true })
    (map-set learner-subsidy-count learner (+ current-count u1))
    (var-set subsidy-pool-balance (- pool-balance subsidy-amount))
    (let (
      (token (unwrap! (var-get token-contract) (err ERR-TOKEN-NOT-SET)))
    )
      (as-contract (try! (contract-call? token transfer subsidy-amount tx-sender learner none)))
    )
    (var-set total-subsidies-distributed (+ (var-get total-subsidies-distributed) subsidy-amount))
    (print { event: "subsidy-applied", learner: learner, course-id: course-id, amount: subsidy-amount })
    (ok subsidy-amount)
  )
)

(define-public (distribute-funds (batch-size uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (>= (- block-height (var-get last-distribution-time)) (var-get distribution-interval)) (err ERR-INVALID-TIMESTAMP))
    (var-set last-distribution-time block-height)
    (ok true)
  )
)

(define-public (toggle-active-status)
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set active-status (not (var-get active-status)))
    (ok (var-get active-status))
  )
)

(define-public (get-total-subsidies-distributed)
  (ok (var-get total-subsidies-distributed))
)